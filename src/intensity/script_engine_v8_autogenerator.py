
# Copyright 2010 Alon Zakai ('kripken'). All rights reserved.
# This file is part of Syntensity/the Intensity Engine, an open source project. See COPYING.txt for licensing.

import os

old_dir = os.getcwd()
os.chdir(os.path.dirname(__file__))

strings = [
    'i', 's', 'd', 'o',
    'ii', 'is', 'ss', 'sd', 'si', 'oi', 'ob', 'os', 'od', 'dd', 'ds', 'do',
    'iis', 'iii', 'iid', 'ddd', 'sdd', 'sss',
    'oddd', 'dddd', 'iddd', 'iiss', 'iiis', 'ssdi', 'ssdd', 'iiii',
    'sdddi', 'sdddii', 'sssdd', 'ddddi', 'sdd', 'sdddd', 'siidi', 'iiiss', 'iiisi', 'iiiii', 'idddd',
    'dddddd', 'iidddi', 'iisddd', 'iiiddd', 'ddddii', 'idddsi', 'ssiiid', 'sdddddd', 'ddddddd', 'iiiiddd', 'iiddddd', 'iiiiii',
    'ddddddii', 'ddddiiid', 'ssiiidi', 'iidddddd', 'iiiiiii',
    'ddddddiii', 'oidddiiii', 'idddidddi', 'dddsiiidi',
    'iiidddidii', 'ddddddiiid', 'osiddddddii',
    'iissdddiiii', 'iiddddddidi',
    'idddddddiiii', 'idddddiidddi',
    'dddddddiiidddd',
    'osiddddddiidddd'
]

out = open('script_engine_v8_autogenerated.h', 'w')
for string in strings:
    out.write('''
// %(string)s
#define V8_FUNC_%(string)s(new_func, wrapped_code) \\
    V8_FUNC_GEN(new_func, \\
''' % { 'string': string })

    index = 0
    for param in string:
        out.write('        ')
        temp = { 'index': index, 'indexplus': index+1 }
        if param == 'i':
            out.write('int arg%(indexplus)d = args[%(index)d]->IntegerValue(); \\\n' % temp)
#           out.write('int arg%(indexplus)d = !args[%(index)d]->IsUndefined() ? args[%(index)d]->IntegerValue() : -1; \\\n' % temp)
        elif param == 's':
            out.write('std::string _arg%(indexplus)d = *(v8::String::Utf8Value(args[%(index)d])); const char* arg%(indexplus)d = _arg%(indexplus)d.c_str(); \\\n' % temp)
        elif param == 'd':
            # Validate non-NaN - prevents bugs with sending undefines from scripting
            out.write('double arg%(indexplus)d = args[%(index)d]->NumberValue(); if (ISNAN(arg%(indexplus)d)) RAISE_SCRIPT_ERROR(isNAN failed on argument %(index)d in #new_func); \\\n' % temp)
        elif param == 'o':
            out.write('Handle<Object> arg%(indexplus)d = args[%(index)d]->ToObject(); \\\n' % temp)
        elif param == 'b':
            out.write('bool arg%(indexplus)d = args[%(index)d]->BooleanValue(); \\\n' % temp)
        else:
            print 'Invalid parameter:', param
            assert(0)
        index += 1

    out.write('        , wrapped_code);\n\n')

out.close()

os.chdir(old_dir)

